@using WebApplication4.Entities
@using WebApplication4.Enums

<div id="app">

	<div class="row mb-3">
		<label class="col-sm-4 form-label">Manufacturer :</label>
		<div class="col-sm-8">
			<select class="form-select select2" id="filterbymanufacturer" name="filterbymanufacturer" v-model="filters.selectedManufacturers" multiple>
				<option v-for="manufacturer in filters.manufacturers" :key="manufacturer" :value="manufacturer">
					{{manufacturer}}
				</option>
			</select>
		</div>
	</div>
	<div class="row mb-3">
		<label class="col-sm-4 form-label">Colors :</label>
		<div class="col-sm-8">
			<select class="form-select select2" id="filterbycolor" name="filterbycolor" v-model="filters.selectedColors" multiple>
				<option v-for="color in filters.colors" :key="color" :value="color">
					{{color}}
				</option>
			</select>
		</div>
	</div>

	<label for="MinPrice">Minimum Price :</label>
	<input type="number" v-model="filters.minPrice" id="MinPrice" name="MinPrice" step="1000" min="0" />

	<label for="MaxPrice">Maximum Price :</label>
	<input type="number" v-model="filters.maxPrice" id="MaxPrice" name="MaxPrice" step="1000" min="0" />

	<div class="d-flex justify-content-end mb-3">
		<button @@click="filterCars" class="btn btn-primary">Filter</button>
		<a href="/Car" class="btn btn-secondary ms-3">Back to List</a>
	</div>

	<div class="row pb-3">
		<div class="col-6">
		</div>
		<div class="col-6 text-end">
			<a asp-controller="Car" asp-action="Create" class="btn btn-primary">
				<i class="bi bi-plus-circle"></i> Create New Car
			</a>
		</div>
	</div>

	<div>
		<table class="table table-striped table-bordered">
			<thead>
				<tr>
					<th>Id</th>
					<th>Manufacturer</th>
					<th>Model</th>
					<th>Color</th>
					<th>Price</th>
				</tr>
			</thead>
			<tbody>
				<tr v-for="car in cars" :key="car.id">
					<td>{{car.id}}</td>
					<td>{{filters.manufacturers[car.manufacturer]}}</td>
					<td>{{car.model}}</td>
					<td>{{filters.colors[car.color]}}</td>
					<td>{{car.price}}</td>
				</tr>
			</tbody>
		</table>
		<nav aria-label="Page navigation">
			<ul class="pagination justify-content-center">
				<li class="page-item" :class="{ disabled : pager.currentPage === 1 }"> 
					<button class="page-link" @@click="changePage(pager.currentPage -1)">Pervious</button>
				</li>
				<li class="page-item" v-for="page in pager.totalPages" :key="page" :class="{active : pager.currentPage == page }">
					<button class="page-link" @@click="changePage(page)">{{page}}</button>
				</li>
				<li class="page-item" :class="{disabled : pager.currentPage == pager.totalPages}">
					<button class="page-link" @@click="changePage(pager.currentPage+1)">Next</button>
				</li>
			</ul>
		</nav>
	</div>
</div>



<script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vue@2"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>


<script>
	new Vue({
		el: '#app',
		data : {
			filters: {
				selectedManufacturers: [],
				selectedColors: [],
				minPrice: null,
				maxPrice: null,
				colors: @Html.Raw(Json.Serialize(Enum.GetNames(typeof(Colors)))),
				manufacturers: @Html.Raw(Json.Serialize(Enum.GetNames(typeof(Manufacturers)))),
			},
			pager: {
				currantPage: 1,
				pageSize: 10,
				totalPages : 0,
				totalItems : 0
			},
			cars : '',
		},
		methods : {
			applyFilters: async function () {
				try {
					let selected = document.getElementById("filterbycolor").selectedOptions;
					let newArray = [];
					for (let i = 0; i < selected.length;i++)
					{
						newArray.push(selected[i].value)
					}

					let selectedmanufacturer = document.getElementById("filterbymanufacturer").selectedOptions;
					let newArrayManufacturer = [];
					for (let i = 0; i < selectedmanufacturer.length;i++)
					{
						newArrayManufacturer.push(selectedmanufacturer[i].value)
					}
					
					let queryParams = new URLSearchParams();
					if (newArray.length > 0)
					{
						queryParams.append("filterbycolor", newArray.join(','));
					}
					if(newArrayManufacturer.length > 0)
					{
						queryParams.append("filterbymanufacturer", newArrayManufacturer.join(','));
					}
					if(this.filters.minPrice)
					{
						queryParams.append("MinPrice", this.filters.minPrice);
					}
					if(this.filters.maxPrice)
					{
						queryParams.append("MaxPrice", this.filters.maxPrice);
					}
					if(this.pager.currentPage)
					{
						queryParams.append("page", this.pager.currentPage);
					}
					if(this.pager.pageSize)
					{
						queryParams.append("pageSize", this.pager.pageSize);
					}

					window.history.pushState(null, '', '/Car/?' + queryParams.toString());
					const response = await axios.get('/Car/Filter?' + queryParams.toString());
					console.log(response.data.data);
					this.cars = response.data.data;
					this.filters.selectedColors = newArray;
					this.filters.selectedManufacturers = newArrayManufacturer;
					this.pager.totalItems = response.data.totalItems;
					this.pager.totalPages = Math.ceil(this.pager.totalItems / this.pager.pageSize);

				}
				catch(error)
				{
					console.error("Error Fetching filtered cars :", error);
				}
			},
			filterCars: function () {
				this.pager.currentPage = 1;
				this.applyFilters();
			},
			changePage : function(page)
			{
				if(page > 0 && page <= this.pager.totalPages)
				{
					this.pager.currentPage = page;
					this.applyFilters();
				}
			}
		},
		beforeMount(){
			const urlParams = new URLSearchParams(window.location.search);
			const filtercolor = urlParams.get('filterbycolor');
			const filtermanufacturer = urlParams.get('filterbymanufacturer');
			const minprice = urlParams.get('MinPrice');
			const maxprice = urlParams.get('MaxPrice');
			const page = urlParams.get('page');
			const pagesize = urlParams.get('pageSize');

			this.filters.selectedColors = filtercolor ? filtercolor.split(',') : [];
			this.filters.selectedManufacturers = filtermanufacturer ? filtermanufacturer.split(',') : [];
			this.filters.minPrice = minprice ? parseFloat(minprice) : null; 
			this.filters.maxPrice = maxprice ? parseFloat(maxprice) : null; 
			this.pager.currentPage = page ? parseInt(page) : 1;
			this.pager.pageSize = pagesize ? parseInt(pagesize) : 10;
			
		},
		mounted() {
			this.applyFilters();
		}
	});
</script>
